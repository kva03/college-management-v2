// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TEACHER
  STUDENT
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  role        UserRole
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  teacher     Teacher?
  student     Student?
  accounts    Account[]
  sessions    Session[]
  hallbooking hallBooking[]
 sentMessages  ChatMessage[] @relation("MessageSender")
  studentChats  ChatTicket[]  @relation("StudentChats")
  teacherChats  ChatTicket[]  @relation("TeacherChats")

}

model Teacher {
  id         String     @id @default(cuid())
  username   String     @unique
  department String
  userId     String     @unique
  timeSlots  TimeSlot[]
  bookings   Booking[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
}

model Student {
  id       String    @id @default(cuid())
  name     String?
  rollno   String    @unique
  userId   String    @unique
  bookings Booking[]
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SlotStatus {
  FREE
  BUSY
  LECTURE
  OTHER
 
}

model TimeSlot {
  id          String     @id @default(cuid())
  teacherId   String
  dayOfWeek   Int // 0-6 for Sunday-Saturday
  startTime   DateTime
  endTime     DateTime
  status      SlotStatus @default(FREE)
  isRecurring Boolean    @default(true)
  teacher     Teacher    @relation(fields: [teacherId], references: [id])
  Booking     Booking[]

  @@unique([teacherId, dayOfWeek, startTime, endTime])
}

model Booking {
  id           String        @id @default(cuid())
  teacherId    String
  studentId    String
  timeSlotId   String
  date         DateTime?
  status       BookingStatus @default(PENDING)
  reason       String
  notes        String?
  requestedStartTime DateTime?  // New field for student's requested start time
  requestedEndTime   DateTime?  // New field for student's requested end time
  approvedStartTime  DateTime? // New field for teacher's approved start time
  approvedEndTime    DateTime? // New field for teacher's approved end time
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  teacher      Teacher       @relation(fields: [teacherId], references: [id])
  student      Student       @relation(fields: [studentId], references: [id])
  timeSlot     TimeSlot      @relation(fields: [timeSlotId], references: [id])
}

model hallBooking {
  id         String        @id @default(cuid())
  theaterId  String
  userId     String?
  timeSlotId String?
  start      Int
  end        Int
  date       DateTime?
  status     BookingStatus @default(PENDING)
  reason     String
  notes      String? // For teacher's response
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  User User? @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatTicket {
  id        String        @id @default(cuid())
  studentId String
  teacherId String
  status    String        @default("OPEN") // OPEN, IN_PROGRESS, CLOSED
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  // Relationships
  student   User          @relation("StudentChats", fields: [studentId], references: [id])
  teacher   User          @relation("TeacherChats", fields: [teacherId], references: [id])

  @@index([studentId])
  @@index([teacherId])
}

model ChatMessage {
  id         String     @id @default(cuid())
  ticketId   String
  content    String
  senderId   String
  senderRole String     // STUDENT or TEACHER
  createdAt  DateTime   @default(now())

  // Relationships
  ticket     ChatTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender     User       @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([senderId])
}